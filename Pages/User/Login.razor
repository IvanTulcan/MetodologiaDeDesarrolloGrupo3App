@page "/login"
@using MetodologiaDeDesarrolloGrupo3App.Authentication
@using MetodologiaDeDesarrolloGrupo3App.Controllers
@using MetodologiaDeDesarrolloGrupo3App.Models
@using MetodologiaDeDesarrolloGrupo3App.Models.Emisor;
@using MetodologiaDeDesarrolloGrupo3App.Models.Users;
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider authState
@inject IJSRuntime js
@inject NavigationManager navManager

<div class="login-container" @onclick:stopPropagation>
    <div class="login-card">
        <h2>Iniciar Sesión</h2>
        <div class="login-form">
            <EditForm Model="@model" OnValidSubmit="@Authenticate">
                <DataAnnotationsValidator />

                <ValidationSummary />
                <label for="email">Correo Electrónico/ Usuario:</label>
                <InputText @bind-Value="model!.UserName" placeholder="0000" />

                <label for="password">Contraseña:</label>
                <InputText @bind-Value="model!.Password" type="password" placeholder="Contraseña" />

                @if (IsAuth)
                {
                    <select @bind="CodeSelected">
                        <option value="0" selected>Seleccione una sucursal...</option>
                        @foreach (var item in emisores)
                        {
                                <option value="@item.Codigo">@item.NombreEmisor</option>
                        }
                    </select>

                    <button class="login-btn" @onclick="CheckEmisor">Continuar</button>
                }
                else
                {
                    <button class="login-btn" @onclick="Authenticate">Iniciar sesión</button>

                    <div class="login-actions">
                        <a href="/resetPassword">Restablecer contraseña</a>
                    </div>

                }

            </EditForm>
        </div>
    </div>
</div>

@code {
    @inject IToastService ToastService

    public class UserLogin
    {
        public UserLogin() { }

        [Required(ErrorMessage = "Ingrese su usuario")]
        [StringLength(4, ErrorMessage = "Contraseña máximo 4 caracteres")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Ingrese su contraseña")]
        [StringLength(5, ErrorMessage = "Contraseña máximo 5 caracteres")]
        public string Password { get; set; }

        public int SelectedProvince { get; set; }
    }

    public UserLogin model { get; set; }

    public Usuario userLogged = new Usuario();

    public List<Emisor> emisores = new List<Emisor>();

    private bool IsAuth { get; set; }

    private int CodeSelected { get; set; }

    protected override async void OnInitialized()
    {
        model ??= new();

        EmisorController EC = new EmisorController();
        emisores = await EC.GetEmisores();
    }  

    private async Task Authenticate()
    {
        IsAuth = false;

        UserController UC = new UserController();

        userLogged = await UC.GetUserByModel(model.UserName, model.Password, model.SelectedProvince);

        if (userLogged == null)
        {
            ToastService.ShowError($"Ha ocurrido un error en el servidor");
            return;
        }

        switch (userLogged.Observacion)
        {
            case "ERROR":
                ToastService.ShowError($"Verifique sus datos");
                navManager.NavigateTo("/");
                return;
            case "CONTRASEÑA INVALIDA":
                ToastService.ShowWarning($"Contraseña invalida");
                navManager.NavigateTo("/");
                return;
            default:
                break;
        }

        IsAuth = true;

        userLogged.UserName = model.UserName;
        userLogged.Password = model.Password;
    }

    public async Task CheckEmisor()
    {
        if(CodeSelected == userLogged.Emisor)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authState;
            await customAuthStateProvider.UpdateAuthenticationState(userLogged);
            navManager.NavigateTo("/" , true);
        }
        else
        {
            ToastService.ShowWarning($"Emisor no válido");
        }
    }

}
