@page "/login"
@using MetodologiaDeDesarrolloGrupo3App.Authentication
@using MetodologiaDeDesarrolloGrupo3App.Controllers
@using MetodologiaDeDesarrolloGrupo3App.Models
@using MetodologiaDeDesarrolloGrupo3App.Models.Users;
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider authState
@inject IJSRuntime js
@inject NavigationManager navManager
<EditForm Model="@model" OnValidSubmit="@Authenticate">
    <DataAnnotationsValidator />

    <div class="login-container" @onclick:stopPropagation>
        <div class="login-card">
            <img src="/css/images/UserProfile.png">
            <h2>Iniciar Sesión</h2>
            <div class="login-form">
                <ValidationSummary />
                <label for="email">Correo Electrónico/ Usuario:</label>
                <InputText @bind-Value="model!.UserName" placeholder="ej: 0000" />

                <label for="password">Contraseña:</label>
                <InputText @bind-Value="model!.Password" type="password" placeholder="Contraseña" />

                <label for="selector">Provincia:</label>
                <InputSelect @bind-Value="model.SelectedProvince">
                    <option value="1">Quito</option>
                    <option value="2">Guayaquil</option>
                    <option value="3">Cuenca</option>
                    <option value="4">Manta</option>
                </InputSelect>

                <button type="submit" class="login-btn">Ingresar</button>

            </div>
        </div>

    </div>

</EditForm>
<div class="login-actions">
    <a href="/resetPassword">Restablecer contraseña</a>
</div>



@code {
    @inject IToastService ToastService

    public class UserLogin
    {
        public UserLogin() { }

        [Required(ErrorMessage = "Ingrese su usuario")]
        [StringLength(4, ErrorMessage = "Contraseña máximo 4 caracteres")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Ingrese su contraseña")]
        [StringLength(5, ErrorMessage = "Contraseña máximo 5 caracteres")]
        public string Password { get; set; }

        public int SelectedProvince { get; set; }
    }

    public UserLogin model { get; set; }

    protected override void OnInitialized() => model ??= new();

    private async Task Authenticate()
    {
        UserController UC = new UserController();

        var usuario = await UC.GetUserByModel(model.UserName, model.Password, model.SelectedProvince);

        if (usuario == null)
        {
            ToastService.ShowError($"Ha ocurrido un error en el servidor");
            return;
        }

        switch (usuario.Observacion)
        {
            case "ERROR":
                ToastService.ShowError($"Ha ocurrido un error en el servidor");
                navManager.NavigateTo("/");
                return;
            case "CONTRASEÑA INVALIDA":
                ToastService.ShowWarning($"Contraseña invalida");
                navManager.NavigateTo("/");
                return;
            case "PROVINCIA INCORRECTA":
                ToastService.ShowWarning($"Provincia incorrecta");
                navManager.NavigateTo("/");
                return;
            default:
                break;
        }
        usuario.UserName = model.UserName;
        usuario.Password = model.Password;

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authState;
        await customAuthStateProvider.UpdateAuthenticationState(usuario);

        navManager.NavigateTo("/", true);
    }

}
