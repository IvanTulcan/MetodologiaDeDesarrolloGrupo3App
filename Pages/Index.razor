@page "/"
@using MetodologiaDeDesarrolloGrupo3App.Authentication;
@using MetodologiaDeDesarrolloGrupo3App.Controllers
@using MetodologiaDeDesarrolloGrupo3App.Models.Emisor
@using System.Security.Claims;
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>

        <h1>Información del emisor</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>Código Emisor</th>
                    <th>Nombre Emisor</th>
                    <th>Número Ruc</th>
                </tr>
            </thead>
            <tbody>
                @if (emisores != null)
                {
                    @foreach (var item in emisores)
                    {
                        <tr>
                            <td>@item.Codigo</td>
                            <td>@item.NombreEmisor</td>
                            <td>@item.NumeroRuc</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <h1>Por favor inicie sesión para acceder a todas las características!</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    @inject IToastService ToastService

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }
    private ClaimsPrincipal AuthenticationStateProviderUser { get; set; }

    private List<Emisor> emisores { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserController userController = new UserController();

        AuthenticationState authenticationState;

        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        this.AuthenticationStateProviderUser = authenticationState.User;

        var authState = authenticationState;

        if (authState.User.Identity.IsAuthenticated)
        {
            var codigoCompania = authState.User.FindFirst(c => c.Type == ClaimTypes.PrimarySid)?.Value;
            var codigoEmisor = authState.User.FindFirst(c => c.Type == ClaimTypes.GroupSid)?.Value;

            emisores = await userController.GetEmisorByCode(int.Parse(codigoEmisor));

            if (emisores != null)
            {
                ToastService.ShowSuccess("Información cargada con exito!");
                ToastService.ClearWarningToasts();
            }
            else
            {
                ToastService.ShowSuccess("No se ha podido cargar información!");
                ToastService.ClearSuccessToasts();
            }
        }
    }
}
