@page "/TrabajadoresIndex"
@using MetodologiaDeDesarrolloGrupo3App.Authentication;
@using MetodologiaDeDesarrolloGrupo3App.Controllers
@using MetodologiaDeDesarrolloGrupo3App.Models.Emisor
@using System.Security.Claims;
@using MetodologiaDeDesarrolloGrupo3App.Models.Trabajador;
@using ClosedXML.Excel;
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>

        <div class="top-row">
            <h1>Trabajadores de la sucursal</h1>
            <h1>|</h1>
            <button class="button-excel" id="btnGenerarExcel" @onclick="GenerarReporte" disabled="@EnableDownload">Generar Excel</button>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Código</th>
                    <th>ID Trabajador</th>
                    <th>Tipo de Trabajador</th>
                    <th>Apellido Paterno</th>
                    <th>Apellido Materno</th>
                    <th>Nombres</th>
                    <th>Identificación</th>
                    <th>Entidad Bancaria</th>
                    <th>Carnet IESS</th>
                    <th>Dirección</th>
                    <th>Teléfono Fijo</th>
                    <th>Teléfono Móvil</th>
                    <th>Género</th>
                    <th>Número de Cuenta Bancaria</th>
                    <th>Código Categoría Ocupación</th>
                    <th>Ocupación</th>
                    <th>Centro de Costos</th>
                    <th>Nivel Salarial</th>
                    <th>Estado del Trabajador</th>
                    <th>Tipo de Contrato</th>
                    <th>Tipo de Cese</th>
                    <th>Estado Civil</th>
                    <th>Tipo de Comisión</th>
                    <th>Fecha de Nacimiento</th>
                    <th>Fecha de Ingreso</th>
                    <th>Fecha de Cese</th>
                    <th>Período de Vacaciones</th>
                    <th>Fecha de Reingreso</th>
                    <th>Fecha Última Actualización</th>
                    <th>Es Reingreso</th>
                    <th>Banco CTA CTE</th>
                    <th>Tipo de Cuenta</th>
                    <th>RSV Indem Acumul</th>
                    <th>Año Últ Rsva Indemni</th>
                    <th>Mes Últ Rsva Indemni</th>
                    <th>Forma Cálculo 13ro</th>
                    <th>Forma Cálculo 14ro</th>
                    <th>Boni Complementaria</th>
                    <th>Boni Especial</th>
                    <th>Remuneración Mínima</th>
                    <th>Cuota Cuenta Corriente</th>
                    <th>Fondo Reserva</th>
                    <th>Mensaje</th>
                </tr>
            </thead>
            <tbody>
                @if (trabajadores != null && trabajadores.Any())
                {
                    @foreach (var trabajador in trabajadores)
                    {
                        <tr>
                            <td>@trabajador.COMP_Codigo</td>
                            <td>@trabajador.Id_Trabajador</td>
                            <td>@trabajador.Tipo_trabajadorAPI</td>
                            <td>@trabajador.Apellido_Paterno</td>
                            <td>@trabajador.Apellido_Materno</td>
                            <td>@trabajador.Nombres</td>
                            <td>@trabajador.Identificacion</td>
                            <td>@trabajador.Entidad_Bancaria</td>
                            <td>@trabajador.CarnetIESS</td>
                            <td>@trabajador.Direccion</td>
                            <td>@trabajador.Telefono_Fijo</td>
                            <td>@trabajador.Telefono_Movil</td>
                            <td>@trabajador.GeneroAPI</td>
                            <td>@trabajador.Nro_Cuenta_Bancaria</td>
                            <td>@trabajador.Codigo_Categoria_OcupacionAPI</td>
                            <td>@trabajador.OcupacionAPI</td>
                            <td>@trabajador.Centro_Costos</td>
                            <td>@trabajador.Nivel_SalarialAPI</td>
                            <td>@trabajador.EstadoTrabajadorAPI</td>
                            <td>@trabajador.Tipo_ContratoAPI</td>
                            <td>@trabajador.Tipo_CeseAPI</td>
                            <td>@trabajador.EstadoCivilAPI</td>
                            <td>@trabajador.TipodeComisionAPI</td>
                            <td>@trabajador.FechaNacimiento.ToString("dd/MM/yyyy")</td>
                            <td>@trabajador.FechaIngreso.ToString("dd/MM/yyyy")</td>
                            <td>@trabajador.FechaCese.ToString("dd/MM/yyyy")</td>
                            <td>@trabajador.PeriododeVacacionesAPI</td>
                            <td>@trabajador.FechaReingreso.ToString("dd/MM/yyyy")</td>
                            <td>@trabajador.Fecha_Ult_Actualizacion.ToString("dd/MM/yyyy")</td>
                            <td>@trabajador.EsReingresoAPI</td>
                            <td>@trabajador.BancoCTA_CTE</td>
                            <td>@trabajador.Tipo_CuentaAPI</td>
                            <td>@trabajador.RSV_Indem_Acumul</td>
                            <td>@trabajador.Año_Ult_Rsva_Indemni</td>
                            <td>@trabajador.Mes_Ult_Rsva_Indemni</td>
                            <td>@trabajador.FormaCalculo13roAPI</td>
                            <td>@trabajador.FormaCalculo14roAPI</td>
                            <td>@trabajador.BoniComplementaria</td>
                            <td>@trabajador.BoniEspecial</td>
                            <td>@trabajador.Remuneracion_Minima</td>
                            <td>@trabajador.CuotaCuentaCorriente</td>
                            <td>@trabajador.Fondo_ReservaAPI</td>
                            <td>@trabajador.Mensaje</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="40">No hay trabajadores para mostrar</td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>

    <NotAuthorized>
        <h1>Por favor inicie sesión para acceder a todas las características!</h1>
    </NotAuthorized>

</AuthorizeView>

@code {
    @inject IToastService ToastService

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }
    private ClaimsPrincipal AuthenticationStateProviderUser { get; set; }

    private List<Trabajador> trabajadores { get; set; }
    private bool EnableDownload { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        TrabajadorController trabajadorController = new TrabajadorController();
        AuthenticationState authenticationState;

        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        this.AuthenticationStateProviderUser = authenticationState.User;

        var authState = authenticationState;

        if (authState.User.Identity.IsAuthenticated)
        {
            var codigoEmisor = authState.User.FindFirst(c => c.Type == ClaimTypes.GroupSid)?.Value;

            trabajadores = await trabajadorController.GetTrabajadoresByCode(int.Parse(codigoEmisor));

            EnableDownload = false;

            if (trabajadores != null)
            {
                ToastService.ClearWarningToasts();
            }
            else
            {
                ToastService.ShowSuccess("No se ha podido cargar información!");
                ToastService.ClearSuccessToasts();
            }
        }
    }

    private async Task GenerarReporte()
    {
        using (var libro = new XLWorkbook())
        {
            IXLWorksheet hoja = libro.Worksheets.Add("empleados");

            hoja.Cell(1, 1).Value = "Número de identificación";
            hoja.Cell(1, 2).Value = "Tipo Documento";
            hoja.Cell(1, 3).Value = "Nombres";
            hoja.Cell(1, 4).Value = "Apellido Paterno";
            hoja.Cell(1, 5).Value = "Apellido Materno";
            hoja.Cell(1, 6).Value = "Género";
            hoja.Cell(1, 7).Value = "Salario";

            for (int fila = 1; fila <= trabajadores.Count; fila++)
            {
                hoja.Cell(fila + 1, 1).Value = trabajadores[fila - 1].Identificacion;
                hoja.Cell(fila + 1, 2).Value = "Cédula Ecuatoriana";
                hoja.Cell(fila + 1, 3).Value = trabajadores[fila - 1].Nombres;
                hoja.Cell(fila + 1, 4).Value = trabajadores[fila - 1].Apellido_Paterno;
                hoja.Cell(fila + 1, 5).Value = trabajadores[fila - 1].Apellido_Materno;
                hoja.Cell(fila + 1, 6).Value = trabajadores[fila - 1].GeneroAPI;
                hoja.Cell(fila + 1, 7).Value = trabajadores[fila - 1].Remuneracion_Minima;
            }

            using (var memoria = new MemoryStream())
            {
                libro.SaveAs(memoria);
                var nombreExcel = string.Concat("Reporte ", DateTime.Now.ToString(), ".xlsx");

                await js.InvokeAsync<object>(
                    "DescargarExcel",
                    nombreExcel,
                    Convert.ToBase64String(memoria.ToArray())
                );
            }


        }
    }
}