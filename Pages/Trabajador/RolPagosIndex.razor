@page "/RolPagosIndex"
@using MetodologiaDeDesarrolloGrupo3App.Authentication;
@using MetodologiaDeDesarrolloGrupo3App.Controllers;
@using System.Security.Claims;
@using MetodologiaDeDesarrolloGrupo3App.Models.Trabajador;
@using ClosedXML.Excel;
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Rol de pagos</PageTitle>

<AuthorizeView>
    <Authorized>

        <div class="top-row">
            <h1>Trabajadores de la sucursal</h1>
            <h1>|</h1>
            <button class="button-excel" id="btnGenerarExcel" @onclick="GenerarReporte" disabled="@EnableDownload">Generar Rol de pagos</button>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Seleccionar</th>
                    <th>ID Trabajador</th>
                    <th>Nombres</th>
                    <th>Apellido Paterno</th>
                    <th>Apellido Materno</th>
                    <th>Identificación</th>
                    <th>Sueldo</th>
                    <th>IESS Patronal</th>
                    <th>IESS_Personal</th>
                    <th>Total</th>

                </tr>
            </thead>
            <tbody>
                @if (trabajadores != null && trabajadores.Any())
                {
                    @foreach (var trabajador in trabajadores)
                    {
                        <tr>
                            <td><input type="checkbox" class="checkbox-trabajador" value="@trabajador.Id_Trabajador" @onchange="@(e => CheckboxChanged(e, trabajador.Id_Trabajador))"></td>
                            <td>@trabajador.Id_Trabajador</td>
                            <td>@trabajador.Nombres</td>
                            <td>@trabajador.Apellido_Paterno</td>
                            <td>@trabajador.Apellido_Materno</td>
                            <td>@trabajador.Identificacion</td>
                            <td>@trabajador.Remuneracion_Minima</td>
                            <td>@trabajador.IESS_PATRONAL</td>
                            <td>@trabajador.IESS_PERSONAL</td>
                            <td>@trabajador.Total</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="40">No hay trabajadores para mostrar</td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>

    <NotAuthorized>
        <h1>Por favor inicie sesión para acceder a todas las características!</h1>
    </NotAuthorized>

</AuthorizeView>

@code {
    @inject IToastService ToastService

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }
    private ClaimsPrincipal AuthenticationStateProviderUser { get; set; }

    private List<Trabajador> trabajadores { get; set; }
    private bool EnableDownload { get; set; } = true;

    private List<int> idsSeleccionados = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        TrabajadorController trabajadorController = new TrabajadorController();
        AuthenticationState authenticationState;

        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        this.AuthenticationStateProviderUser = authenticationState.User;

        var authState = authenticationState;

        if (authState.User.Identity.IsAuthenticated)
        {
            var codigoEmisor = authState.User.FindFirst(c => c.Type == ClaimTypes.GroupSid)?.Value;

            trabajadores = await trabajadorController.GetTrabajadoresByCode(int.Parse(codigoEmisor));

            EnableDownload = false;

            if (trabajadores != null)
            {
                ToastService.ClearWarningToasts();
            }
            else
            {
                ToastService.ShowSuccess("No se ha podido cargar información!");
                ToastService.ClearSuccessToasts();
            }
        }
    }

    private void CheckboxChanged(ChangeEventArgs e, int trabajadorId)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            if (!idsSeleccionados.Contains(trabajadorId))
            {
                idsSeleccionados.Add(trabajadorId);
            }
        }
        else
        {
            idsSeleccionados.Remove(trabajadorId);
        }
    }

    private async Task GenerarReporte()
    {
        using (var libro = new XLWorkbook())
        {

            var trabajadoresSeleccionados = trabajadores.Where(t => idsSeleccionados.Contains(t.Id_Trabajador)).ToList();


            IXLWorksheet hoja = libro.Worksheets.Add("empleados");

            var estiloEncabezado = libro.Style;
            estiloEncabezado.Font.Bold = true;
            estiloEncabezado.Fill.BackgroundColor = XLColor.Green;
            estiloEncabezado.Font.FontColor = XLColor.White;

            var rangoEncabezados = hoja.Range(1, 1, 1, 9);
            rangoEncabezados.Style = estiloEncabezado;

            var estiloCentrado = libro.Style;
            estiloCentrado.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            estiloCentrado.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            hoja.Cells().Style = estiloCentrado;

            hoja.Cell(1, 1).Value = "ID del Trabajador";
            hoja.Cell(1, 2).Value = "Nombres";
            hoja.Cell(1, 3).Value = "Apellido Paterno";
            hoja.Cell(1, 4).Value = "Apellido Materno";
            hoja.Cell(1, 5).Value = "Identificación";
            hoja.Cell(1, 6).Value = "Sueldo";
            hoja.Cell(1, 7).Value = "IESS Patronal";
            hoja.Cell(1, 8).Value = "IESS Personal";
            hoja.Cell(1, 9).Value = "Total";

            for (int fila = 1; fila <= trabajadoresSeleccionados.Count; fila++)
            {
                var rangoFila = hoja.Range(fila + 1, 1, fila + 1, 9);
                rangoFila.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                hoja.Cell(fila + 1, 1).Value = trabajadoresSeleccionados[fila - 1].Id_Trabajador;
                hoja.Cell(fila + 1, 2).Value = trabajadoresSeleccionados[fila - 1].Nombres;
                hoja.Cell(fila + 1, 3).Value = trabajadoresSeleccionados[fila - 1].Apellido_Paterno;
                hoja.Cell(fila + 1, 4).Value = trabajadoresSeleccionados[fila - 1].Apellido_Materno;
                hoja.Cell(fila + 1, 5).Value = trabajadoresSeleccionados[fila - 1].Identificacion;
                hoja.Cell(fila + 1, 6).Value = trabajadoresSeleccionados[fila - 1].Remuneracion_Minima;
                hoja.Cell(fila + 1, 7).Value = trabajadoresSeleccionados[fila - 1].IESS_PATRONAL;
                hoja.Cell(fila + 1, 8).Value = trabajadoresSeleccionados[fila - 1].IESS_PERSONAL;
                hoja.Cell(fila + 1, 9).Value = trabajadoresSeleccionados[fila - 1].Total;
            }

            hoja.Columns().AdjustToContents();

            using (var memoria = new MemoryStream())
            {
                libro.SaveAs(memoria);
                var nombreExcel = string.Concat("Reporte ", DateTime.Now.ToString(), ".xlsx");

                await js.InvokeAsync<object>(
                    "DescargarExcel",
                    nombreExcel,
                    Convert.ToBase64String(memoria.ToArray())
                );
            }
        }
    }
}